-- build image
docker build --tag {image} .

-- create new image with new tag
docker tag {image:oldtag} {image:newtag}

# Run spring boot image 
docker run -dp 8085:8083 --name prj3 -v "$(pwd):/app" --network network nhanpq/prj3:latest


# run DB image
docker run --rm -d -v /database/data:/var/lib/mysql -v /database/config:/etc/mysql/conf.d --name db -p 3310:3306 -e MYSQL_USER=nhanpq -e MYSQL_PASSWORD=abc123 -e MYSQL_ROOT_PASSWORD=abc123 -e MYSQL_DATABASE=Student --network network mysql


# mysql config properties

# server.port=8080

spring.mvc.converters.preferred-json-mapper=gson

spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3310/login
spring.datasource.username=nhanpq
spring.datasource.password=abc123
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql=true

# ddl-auto: create, update, create-drop, validate và none
# create: Trước tiên Hibernate sẽ drop các bảng đang có và sau đó tạo ra các bảng mới.
# update: Mô hình đối tượng được tạo dựa trên việc ánh xạ (thông qua các annotation hoặc XML) được so sánh với dữ liệu hiện có trong schema và sau đó Hibernate sẽ cập nhật lại schema với những thông tin mới. Nó sẽ không bao giờ xóa đi các bảng hay các cột đang có ngay cả khi chúng không còn được ứng dụng của ta yêu cầu nữa.
# create-drop: Tương tự như create nhưng sau khi tất cả các hoạt động đã được hoàn thành, Hibernate sẽ thực hiện việc drop database. Thường được sử dụng cho unit test.
# validate: Hibernate chỉ xác thực xem các bảng và các cột có tồn tại hay không, nếu không nó sẽ ném ra một ngoại lệ (exception).
# none: Giá trị này được dùng để tắt việc tạo DDL.